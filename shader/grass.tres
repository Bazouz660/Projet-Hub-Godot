[gd_resource type="Shader" format=3 uid="uid://b2txyoxp27avj"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, specular_disabled;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_nearest, repeat_enable;
uniform vec4 backlight : source_color;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform float wind_strength : hint_range(0.0, 1.0) = 0.1;
uniform float wind_speed : hint_range(0.0, 10.0) = 1.0;
uniform float wind_scale : hint_range(0.1, 10.0) = 1.0;

void vertex() {
    UV = UV * uv1_scale.xy + uv1_offset.xy;
    
    vec3 world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
    float wind_time = TIME * wind_speed;
    float wind_vertical_influence = smoothstep(0.0, 1.0, VERTEX.y);
    float position_variation = sin(world_pos.x * 0.1) * cos(world_pos.z * 0.1) * 2.0;
    float wind_horizontal = sin(wind_time + world_pos.x * wind_scale + world_pos.z * wind_scale + position_variation) * wind_strength;
    float wind_depth = cos(wind_time * 0.7 + world_pos.x * wind_scale * 1.2 + world_pos.z * wind_scale + position_variation) * wind_strength * 0.5;
    
    VERTEX.x += wind_horizontal * wind_vertical_influence;
    VERTEX.z += wind_depth * wind_vertical_influence;
    
    MODELVIEW_MATRIX = VIEW_MATRIX * mat4(
            MAIN_CAM_INV_VIEW_MATRIX[0],
            MAIN_CAM_INV_VIEW_MATRIX[1],
            MAIN_CAM_INV_VIEW_MATRIX[2],
            MODEL_MATRIX[3]);
    MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
}

void fragment() {
    vec2 base_uv = UV;
    vec4 albedo_tex = texture(texture_albedo, base_uv);
    ALBEDO = albedo.rgb * albedo_tex.rgb;
    ALPHA *= albedo.a * albedo_tex.a;
    BACKLIGHT = backlight.rgb;
}
"
